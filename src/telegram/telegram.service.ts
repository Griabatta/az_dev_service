// src/telegram/registration-bot.service.ts
import { Injectable } from '@nestjs/common';
import * as TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import path from 'path';
import * as fs from 'fs';

interface RegistrationSession {
  step: string;
  data: {
    name?: string;
    email?: string;
    clientId?: string;
    apiKey?: string;
    clientPerFormanceId?: string;
    clientSecret?: string;
    tableSheetId?: string;
    mpStatToken?: string;
  };
}

@Injectable()
export class RegistrationBotService {
  private bot: TelegramBot;
  private sessions: Map<string, RegistrationSession> = new Map();
  private readonly tokenTGBot = process.env.TG_TOKEN || "7958171770:AAEbKZaTkYIUWxruNQ1N_ia2U_akREcVgD8";
  constructor() {
    this.validateToken();
    this.bot = new TelegramBot(this.tokenTGBot, { polling: true });
    this.setupHandlers();
  }

  private validateToken() {
    if (!this.tokenTGBot) {
      throw new Error('Telegram Bot Token not provided in .env file!');
    }
    
  }

  // private async sendInstructionImage(chatId: number) {
  //   try {
  //     // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
  //     const imagePath = path.resolve(__dirname, '../../../assets/table-sheet-instruction.png');
      
  //     console.log('Looking for image at:', imagePath); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  
  //     if (!fs.existsSync(imagePath)) {
  //       throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${imagePath}`);
  //     }
  
  //     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
  //     await this.bot.sendPhoto(chatId, fs.createReadStream(imagePath), {
  //       caption: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é Table Sheet ID'
  //     });
  
  //   } catch (error) {
  //     console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
  //     await this.bot.sendMessage(
  //       chatId,
  //       'üìå –í–≤–µ–¥–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL:\n' +
  //       '1. –û—Ç–∫—Ä–æ–π—Ç–µ Google —Ç–∞–±–ª–∏—Ü—É\n' +
  //       '2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —á–∞—Å—Ç—å –º–µ–∂–¥—É "/d/" –∏ "/edit"\n' +
  //       '–ü—Ä–∏–º–µ—Ä: –¥–ª—è ".../d/ABC123/edit" –≤–≤–µ–¥–∏—Ç–µ: ABC123'
  //     );
  //   }
  // }


  private setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id.toString();
      
      this.sessions.set(chatId, {
        step: 'name',
        data: {},
      });

      this.bot.sendMessage(
        chatId,
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:'
      );
    });

    this.bot.onText(/\/cancel/, (msg) => {
        const chatId = msg.chat.id.toString();
        this.sessions.delete(chatId);
        this.bot.sendMessage(chatId, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - /start');
      });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (msg) => {
      const chatId = msg.chat.id.toString();
      const text = msg.text;
      const session = this.sessions.get(chatId);

      if (!session || msg.text?.startsWith('/')) return;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤
      switch (session.step) {
        case 'name':
          session.data.name = text;
          session.step = 'email';
          this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
          break;

        case 'email':
          session.data.email = text;
          session.step = 'clientId';
          this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ Client ID:');
          break;

        case 'clientId':
          session.data.clientId = text;
          session.step = 'apiKey';
          this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ API Key:');
          break;

        case 'apiKey':
          session.data.apiKey = text;
          session.step = 'clientPerforId';
          this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ Client Performance ID:');
          break;

        case 'clientPerforId':
          session.data.clientPerFormanceId = text;
          session.step = 'clientSecret';
          this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ Client Secret:');
          break;

        case 'clientSecret':
          session.data.clientSecret = text;
          session.step = 'tableSheetId';
          this.bot.sendMessage(
            chatId,
            'üìå –í–≤–µ–¥–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL:\n' +
            '1. –û—Ç–∫—Ä–æ–π—Ç–µ Google —Ç–∞–±–ª–∏—Ü—É\n' +
            '2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —á–∞—Å—Ç—å –º–µ–∂–¥—É "/d/" –∏ "/edit"\n' +
            '–ü—Ä–∏–º–µ—Ä: –¥–ª—è ".../d/ABC123/edit" –≤–≤–µ–¥–∏—Ç–µ: ABC123'
          );
          // const imagePath = path.join(__dirname, 'assets/table-sheet-instruction.png');
          
          // const stream = fs.createReadStream(imagePath);
          // this.bot.sendPhoto(chatId, stream, {
          //   caption: '–í–≤–µ–¥–∏—Ç–µ ID Google —Ç–∞–±–ª–∏—Ü—ã (–∏–∑ URL):\n–ü—Ä–∏–º–µ—Ä: ABC123xyz'
          // });
          break;

        case 'tableSheetId':
          session.data.tableSheetId = text;
          session.step = 'mpStatToken';
          this.bot.sendMessage(
            chatId,
            '–í–≤–µ–¥–∏—Ç–µ MP Stat Token (–µ—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"):'
          );
          break;

        case 'mpStatToken':
          if (text !== '-') session.data.mpStatToken = text;
          await this.sendRegistrationRequest(chatId, session.data);
          break;
      }

      this.sessions.set(chatId, session);
    });
  }

  private async sendRegistrationRequest(chatId: string, data: any) {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
      const requestBody = {
        ...data,
        tgId: chatId
      };
      

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await axios.post(
        'http://localhost:3000/api/registration/',
        requestBody
      );

      if (response.status === 201) {
        this.bot.sendMessage(
          chatId,
          '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!'
        );
      } else {
        throw new Error(`HTTP status ${response.status}`);
      }
    } catch (error) {
      console.error('Registration error:', error);
      this.bot.sendMessage(
        chatId,
        '‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      );
    } finally {
      this.sessions.delete(chatId); // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    }
  }

  
}